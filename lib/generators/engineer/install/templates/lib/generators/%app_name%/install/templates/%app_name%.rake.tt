namespace "<%= app_name %><%#%>" do

  desc "Update all of <%= app_name %><%#%>'s related resources"
  task :update => [:assets, "db:migrate"]

  namespace :db do<%# TODO: not everyone uses active record. %>

    desc "Load <%= app_name %><%#%>'s seed data"
    task :seed => :environment do
      seed_file = File.join(<%= app_module %><%#%>::Engine.root, 'db', 'seeds.rb')
      load(seed_file) if File.exist?(seed_file)
    end

    desc "Import <%= app_name %><%#%>'s migrations"
    task :migrate do
      require 'rails/generators/active_record'
      db_migrate = File.join(%w{db migrate})

      migrations = Dir[File.join <%= app_module %><%#%>::Engine.root, *%w{db migrate [0-9]*_*.rb}]
      migrations.sort.each do |old_migration|
        old_name = File.basename(old_migration).match(/\d+_(.*)\.rb/)[1]
        new_name = "<%= app_name %><%#%>_#{old_name}"

        next unless Dir[File.join(db_migrate, "[0-9]*_#{new_name}.rb")].empty?
        mkdir_p db_migrate unless File.exists? db_migrate

        migration_number = ActiveRecord::Generators::Base.next_migration_number(db_migrate)
        new_migration = File.join db_migrate, "#{migration_number}_#{new_name}.rb"
        tmp_migration = File.join Dir::tmpdir, "#{migration_number}_#{new_name}.rb"

        migration_source = File.read(old_migration)
        migration_source.gsub! "class #{old_name.camelize}", "class #{new_name.camelize}"
        File.open(tmp_migration, "w") { |f| f << migration_source }

        cp tmp_migration, new_migration

        # TODO Kill after https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/4412
        sleep 1 # wait for timestamp to change.
      end
    end

  end

  desc "Link (or copy) <%= app_name %><%#%>'s static assets"
  task :assets => :environment do
    engine_asset_path = File.join(
      Rails.application.paths.public.to_a.first,
      <%= app_module %><%#%>::Engine::ASSET_PREFIX)

    rm_rf engine_asset_path
    begin
      ln_s <%= app_module %><%#%>::Engine.paths.public.to_a.first, engine_asset_path
    rescue NotImplemented
      cp_r <%= app_module %><%#%>::Engine.paths.public.to_a.first, engine_asset_path
    end
  end

end

namespace :engines do

  desc "Load seed data from all engines"
  task "db:seed" => "<%= app_name %><%#%>:db:seed"

  desc "Import migrations from all engines"
  task "db:migrate" => "<%= app_name %><%#%>:db:migrate"

  desc "Link (or copy) static assets from all engines"
  task :assets => "<%= app_name %><%#%>:assets"

  desc "Update related resources from all engines"
  task :update => "<%= app_name %><%#%>:update"

end

task "db:seed" => "engines:db:seed"
